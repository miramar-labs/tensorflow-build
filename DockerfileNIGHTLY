ARG CUDA=11.0
ARG UBUNTU_VERSION=18.04
ARG ARCH=
FROM nvidia/cuda${ARCH:+-$ARCH}:${CUDA}-cudnn8-devel-ubuntu${UBUNTU_VERSION}
ARG ARCH
ARG CUDA
ARG CUDNN=8.0.4.30-1
ARG CUDNN_MAJOR_VERSION=8
ARG LIB_DIR_PREFIX=x86_64
ARG LIBNVINFER=7.1.3-1
ARG LIBNVINFER_MAJOR_VERSION=7

MAINTAINER Aaron Cody <aaron@aaroncody.com>

USER root
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update
RUN apt-get -y upgrade
RUN apt-get install -y apt-utils wget tree git vim curl mlocate

# Install dev tools
RUN apt-get install -y build-essential

# Install python 3.8 and pip
RUN apt install -y python3.8
RUN apt install -y python3-pip
RUN pip3 install --upgrade pip
RUN link /usr/bin/python3 /usr/bin/python
RUN link /usr/bin/pip3 /usr/bin/pip

# Set up SSH
RUN mkdir /root/.ssh
ADD id_rsa /root/.ssh/id_rsa
ADD id_rsa.pub /root/.ssh/id_rsa.pub
ADD config /root/.ssh/config

RUN chmod 700 ~/.ssh
RUN chmod 600 ~/.ssh/id_rsa
RUN chmod 644 ~/.ssh/id_rsa.pub
RUN chmod 644 ~/.ssh/config

# Install Go
RUN wget https://dl.google.com/go/go1.16.linux-amd64.tar.gz
RUN tar -xvf go1.16.linux-amd64.tar.gz -C /usr/local
RUN echo "export GOROOT=/usr/local/go" >> /root/.bashrc
RUN echo "export GOPATH=/root/go" >> /root/.bashrc
RUN echo "export PATH=/root/go/bin:/usr/local/go/bin:$PATH" >> /root/.bashrc
ENV GOROOT="/usr/local/go"
ENV GOPATH="$USER/go"
ENV PATH="$GOROOT/bin:$GOPATH/bin:$PATH"

# Python dependencies
RUN pip3 install six h5py 'numpy<1.19.0' wheel setuptools mock 'future>=0.17.1' 'gast==0.3.3' typing_extensions
RUN pip3 install keras_applications --no-deps
RUN pip3 install keras_preprocessing --no-deps

# Install Baselisk
RUN go get github.com/bazelbuild/bazelisk
RUN mv `which bazelisk` /usr/local/bin/bazel

# Install TensorRT
#ADD packages/nv-tensorrt-repo-ubuntu1804-cuda11.1-trt7.2.2.3-ga-20201211_1-1_amd64.deb .
#RUN dpkg -i nv-tensorrt-repo-ubuntu1804-cuda11.1-trt7.2.2.3-ga-20201211_1-1_amd64.deb

# Get TF sources
RUN git clone --depth 1 --branch nightly git@github.com:tensorflow/tensorflow.git

# Set env vars for configure
ENV TF_NEED_CUDA=1
ENV TF_NEED_TENSORRT=0
ENV TF_CUDA_VERSION=11.0
ENV CUDA_TOOLKIT_PATH="/usr/local/cuda"
ENV TF_CUDNN_VERSION=8
ENV TF_TENSORRT_VERSION=7.2.2
ENV CUDNN_INSTALL_PATH=/usr
ENV TF_CUDA_COMPUTE_CAPABILITIES=7.5,6.1

ENV PYTHON_BIN_PATH=/usr/bin/python
ENV PYTHON_LIB_PATH=/usr/local/lib/python3.8/dist-packages
ENV TF_NEED_ROCM=0
ENV TF_NEED_GCP=0
ENV TF_NEED_HDFS=0
ENV TF_NEED_OPENCL=0
ENV TF_NEED_JEMALLOC=1
ENV TF_ENABLE_XLA=0
ENV TF_NEED_VERBS=0
ENV TF_CUDA_CLANG=0
ENV TF_NEED_MKL=0
ENV TF_DOWNLOAD_MKL=0
ENV TF_NEED_AWS=0
ENV TF_NEED_MPI=0
ENV TF_NEED_GDR=0
ENV TF_NEED_S3=0
ENV TF_NEED_OPENCL_SYCL=0
ENV TF_SET_ANDROID_WORKSPACE=0
ENV TF_NEED_COMPUTECPP=0
ENV GCC_HOST_COMPILER_PATH=/usr/bin/gcc
ENV CC_OPT_FLAGS="-march=native"
ENV TF_NEED_KAFKA=0
ENV GCC_HOST_COMPILER_PATH=/usr/bin/gcc
ENV CC_OPT_FLAGS="-march=native"

# Configure Build
ENV TF_ROOT=/tensorflow

WORKDIR $TF_ROOT
RUN ./configure

# build entire package
RUN bazel build --config=cuda //tensorflow/tools/pip_package:build_pip_package

# build c++ library
#TODO RUN bazel build --config=cuda  tensorflow:libtensorflow_cc.so

# build nightly:
RUN bazel-bin/tensorflow/tools/pip_package/build_pip_package --nightly_flag /tmp/tensorflow_pkg

# Install wheel
RUN cd /tmp/tensorflow_pkg/;pip3 install tensorflow-2.4.1-cp36-cp36m-linux_x86_64.whl

# [optional]

# Install tfx
#RUN pip3 install tfx

# Install kfp
#RUN pip3 install kfp

# Install sample code
#RUN git clone git@github.com:Building-ML-Pipelines/building-machine-learning-pipelines.git

